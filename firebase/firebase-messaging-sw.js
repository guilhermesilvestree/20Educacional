// firebase-messaging-sw.js

// 1. Importe o SDK do Firebase (VersÃµes compatÃ­veis com Service Worker)
// Nota: VocÃª pode precisar ajustar a versÃ£o (ex: 9.x, 10.x, etc.)
// dependendo do setup do seu projeto.
importScripts('https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js');
importScripts('https://www.gstatic.com/firebasejs/8.10.0/firebase-messaging.js');

// ***************************************************************
// CONFIGURAÃ‡ÃƒO DO FIREBASE (DESCOMMENTADA)
// ***************************************************************

// CERTIFIQUE-SE DE SUBSTITUIR ESTAS CONFIGURAÃ‡Ã•ES PELAS SUAS CREDENCIAIS REAIS DO FIREBASE
const firebaseConfig = {
    apiKey: "AIzaSyD5u7IkNNqpQzwbW86paI3a4pZBPO_yjwk",
    authDomain: "sistema-ce534.firebaseapp.com",
    projectId: "sistema-ce534",
    storageBucket: "sistema-ce534.appspot.com",
    messagingSenderId: "839435076253",
    appId: "1:839435076253:web:92e9485fe2ed9c95364a74"
};
// Inicializa o Firebase no Service Worker
firebase.initializeApp(firebaseConfig);
const messaging = firebase.messaging();


// ***************************************************************
// MANUSEIO DE MENSAGENS PUSH (BACKGROUND)
// ***************************************************************

/**
 * Escuta mensagens push que chegam quando o aplicativo estÃ¡ em segundo plano 
 * ou fechado.
 */
messaging.onBackgroundMessage((payload) => {
    console.log('[firebase-messaging-sw.js] Mensagem Background Recebida: ', payload);

    // Seleciona uma mensagem lÃºdica aleatÃ³ria
    const MENSAGENS_NOTIFICACAO = [
        "Psst... que tal transformar alguns minutos em conhecimento? Sua jornada para a aprovaÃ§Ã£o continua! âœ¨",
        "O universo do saber estÃ¡ te chamando! Uma aula rÃ¡pida pode fazer toda a diferenÃ§a no seu futuro. ðŸš€",
        "Hora de dar um up nos estudos! Que tal desbloquear a prÃ³xima aula e ficar mais perto da sua vaga?",
        "Lembrete cÃ³smico: a constelaÃ§Ã£o do seu sucesso Ã© formada por cada aula que vocÃª estuda. Vamos para a prÃ³xima estrela?",
        "Seu cÃ©rebro pediu um exercÃ­cio! Que tal resolver algumas questÃµes e fortalecer seus conhecimentos? ðŸ’ª",
        "NÃ£o perca o ritmo! Manter a constÃ¢ncia Ã© o segredo dos aprovados. Uma aulinha agora?"
    ];

    const indiceAleatorio = Math.floor(Math.random() * MENSAGENS_NOTIFICACAO.length);
    const bodyText = MENSAGENS_NOTIFICACAO[indiceAleatorio];

    // O objeto de notificaÃ§Ã£o que serÃ¡ exibido
    const notificationTitle = 'Hora de Evoluir!';
    const notificationOptions = {
        body: bodyText,
        icon: '/20Educacional/assets/imagens/logo-192.png',
        badge: '/20Educacional/assets/imagens/logo-192.png',
        // VocÃª pode adicionar um campo "data" para abrir uma URL especÃ­fica
        data: {
            url: payload.data ? payload.data.url : '/' // Exemplo de URL de destino
        }
    };

    // Exibe a notificaÃ§Ã£o
    self.registration.showNotification(notificationTitle, notificationOptions);
});


// ***************************************************************
// MANUSEIO DO CLIQUE NA NOTIFICAÃ‡ÃƒO
// ***************************************************************

self.addEventListener('notificationclick', (event) => {
    event.notification.close();

    const data = event.notification.data;
    const targetUrl = data && data.url ? data.url : '/'; // URL de destino padrÃ£o

    // Tenta focar em uma janela existente ou abre uma nova
    event.waitUntil(
        clients.matchAll({ type: 'window' }).then((windowClients) => {
            for (let i = 0; i < windowClients.length; i++) {
                const client = windowClients[i];
                // Se o aplicativo jÃ¡ estiver aberto, foca na aba
                if (client.url.includes(targetUrl) && 'focus' in client) {
                    return client.focus();
                }
            }
            // Caso contrÃ¡rio, abre uma nova aba
            if (clients.openWindow) {
                return clients.openWindow(targetUrl);
            }
        })
    );
});